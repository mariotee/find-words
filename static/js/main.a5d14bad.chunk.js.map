{"version":3,"sources":["util/findwords.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Match","token","found","regex","RegExp","keysToSearch","Object","keys","Dictionary","filter","x","length","key","test","push","word","def","App","React","useState","data","setData","input","setInput","className","onChange","e","currentTarget","value","toLowerCase","onKeyPress","FindWords","onClick","map","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qv//qBAWO,SAASA,EAAMC,GACpB,IAD4C,EACtCC,EAAkB,GAClBC,EAAe,IAAIC,OAAOH,GAE1BI,EAAeC,OAAOC,KAAKC,GAAYC,QAAO,SAACC,GAAD,OAAOA,EAAEC,SAAWV,EAAMU,UAJlC,cAM1BN,GAN0B,IAM5C,2BAAgC,CAAC,IAAtBO,EAAqB,QAC1BT,EAAMU,KAAKD,IACXV,EAAMY,KAAK,CAACC,KAAMH,EAAKI,IAAMR,EAA2BI,MARlB,8BAY5C,OAAOV,ECSMe,MA3Bf,WAAgB,IAAD,EACWC,IAAMC,SAA8B,IAD/C,mBACNC,EADM,KACAC,EADA,OAEaH,IAAMC,SAAiB,IAFpC,mBAENG,EAFM,KAECC,EAFD,KAcb,OAAO,yBAAKC,UAAU,OACpB,0CACA,qHACA,2BAAOC,SAbY,SAACC,GACpBH,EAASG,EAAEC,cAAcC,MAAMC,gBAYAD,MAAON,EAAOQ,WAT5B,SAACJ,GACJ,UAAVA,EAAEd,KACJS,EAAQU,EAAgBT,OAQ1B,4BAAQE,UAAU,oBAAoBQ,QAAS,WAAOX,EAAQU,EAAgBT,MAA9E,cACA,wBAAIE,UAAU,6BAEZJ,EAAKa,KAAI,SAACP,EAAEQ,GAAH,OAAS,wBAAItB,IAAK,MAAMsB,EAAGV,UAAU,uBAAsB,gCAASE,EAAEX,MAA7D,KAA8EW,EAAEV,WCdpFmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5d14bad.chunk.js","sourcesContent":["import Dictionary from \"util/dictionary.json\";\n\nexport interface IOutput {\n    word: string;\n    def: string;\n}\n\ninterface IDictionary {\n  [key:string]: string;\n}\n\nexport function Match(token:string):IOutput[] {\n  const found:IOutput[] = [];\n  const regex:RegExp = new RegExp(token);\n\n  const keysToSearch = Object.keys(Dictionary).filter((x) => x.length === token.length);\n\n  for (const key of keysToSearch) {\n    if (regex.test(key)) {\n        found.push({word: key, def: (Dictionary as IDictionary)[key]});    \n    }\n  }\n\n  return found;\n}","import React from 'react';\nimport './App.css';\n\nimport * as FindWords from \"util/findwords\"\n\nfunction App() {\n  const [data, setData] = React.useState<FindWords.IOutput[]>([]);\n  const [input, setInput] = React.useState<string>(\"\");\n\n  const handleChange = (e:React.FormEvent<HTMLInputElement>) => {\n    setInput(e.currentTarget.value.toLowerCase());\n  }\n\n  const checkEnter = (e:React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      setData(FindWords.Match(input));\n    }\n  }\n\n  return <div className=\"App\">\n    <h1>Find Words</h1>\n    <p>Enter letters with \".\" (period) as placeholders to find matching words and definitions</p>\n    <input onChange={handleChange} value={input} onKeyPress={checkEnter}></input>\n    <button className=\"btn-info px-4 m-4\" onClick={() => {setData(FindWords.Match(input))}}>Find Words</button>\n    <ul className=\"word-list list-group my-4\">\n    {\n      data.map((e,i) => <li key={\"par\"+i} className=\"list-group-item p-2\"><strong>{e.word}</strong>: {e.def}</li>)\n    }\n    </ul>\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}